# AgroConnect Frontend Implementation Guide

## Order Notification System for Farmer Dashboard

This document outlines the backend implementations for the order notification system and provides guidance on how to implement the corresponding frontend features.

### 1. Backend Model Changes

The backend has been updated with the following models and fields to support order notifications:

#### OrderStatus Model
```python
class OrderStatus(models.TextChoices):
    NEW = 'new', 'New Order'
    ACTIVE = 'active', 'Active Order'
    COMPLETED = 'completed', 'Completed Order'
```

#### ChatRoom Model Additions
```python
# Order status tracking
order_status = models.CharField(
    max_length=20,
    choices=OrderStatus.choices,
    default=OrderStatus.NEW
)
is_new_order = models.BooleanField(default=True)  # For blinking indicator
order_timestamp = models.DateTimeField(auto_now_add=True)
```

### 2. API Endpoints

#### Farmer Orders Endpoint
- **URL**: `/api/chat/rooms/farmer_orders/`
- **Method**: GET
- **Description**: Retrieves all orders for the logged-in farmer, sorted by status priority (NEW, ACTIVE, COMPLETED), then by new order status (blinking indicator), and finally by recency.
- **Response**: List of chat rooms with order details and status.

#### Update Order Status Endpoint
- **URL**: `/api/chat/rooms/{room_id}/update_order_status/`
- **Method**: POST
- **Payload**:
  ```json
  {
    "status": "active" // Can be "new", "active", or "completed"
  }
  ```
- **Description**: Updates the status of an order. Only the farmer can update the status.
- **Response**: Updated chat room object.

### 3. WebSocket Events

The WebSocket consumer has been updated to handle order status changes and notifications:

#### Order Status Update Event
```javascript
// Sent when order status is updated
{
    "type": "order_status_update",
    "room_id": "room-uuid",
    "status": "active", // new, active, or completed
    "updated_by": 123, // user ID
    "updated_by_name": "Farmer Name"
}
```

#### Automatic Order Detection
The backend automatically detects post-checkout messages and marks the chat room as a new order when messages contain phrases like "I've just purchased" or "I'd like to discuss delivery options".

### 4. Frontend Implementation Tasks

#### 1. Farmer Dashboard Order List

Create a component to display orders in the farmer dashboard:

```jsx
// FarmerOrderList.jsx
import React, { useState, useEffect } from 'react';
import { fetchFarmerOrders, updateOrderStatus } from '../../services/chatService';

const FarmerOrderList = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async () => {
    try {
      setLoading(true);
      const response = await fetchFarmerOrders();
      setOrders(response.data);
    } catch (error) {
      console.error('Error loading orders:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (roomId, newStatus) => {
    try {
      await updateOrderStatus(roomId, newStatus);
      // Refresh orders after status update
      loadOrders();
    } catch (error) {
      console.error('Error updating order status:', error);
    }
  };

  return (
    <div className="farmer-orders">
      <h2>My Orders</h2>
      {loading ? (
        <p>Loading orders...</p>
      ) : (
        <div className="order-list">
          {orders.length === 0 ? (
            <p>No orders found.</p>
          ) : (
            orders.map(order => (
              <div 
                key={order.id} 
                className={`order-item ${order.is_new_order ? 'new-order-blink' : ''} status-${order.order_status}`}
              >
                <div className="order-header">
                  <h3>Order from {order.customer_detail.full_name}</h3>
                  <span className="order-time">{order.time_since_order}</span>
                </div>
                <div className="order-details">
                  <img 
                    src={order.product_detail.productImage} 
                    alt={order.product_detail.productName} 
                    className="product-thumbnail"
                  />
                  <div className="product-info">
                    <p className="product-name">{order.product_detail.productName}</p>
                    <p className="product-quantity">Quantity: {order.quantity}</p>
                  </div>
                </div>
                <div className="order-actions">
                  <select 
                    value={order.order_status}
                    onChange={(e) => handleStatusChange(order.room_id, e.target.value)}
                    className={`status-select status-${order.order_status}`}
                  >
                    <option value="new">New Order</option>
                    <option value="active">Active Order</option>
                    <option value="completed">Completed Order</option>
                  </select>
                  <button 
                    onClick={() => navigate(`/farmer/chat/${order.room_id}`)}
                    className="view-chat-btn"
                  >
                    View Chat
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
};

export default FarmerOrderList;
```

#### 2. Chat Service Updates

Update the chat service to include the new endpoints:

```javascript
// chatService.js - Add these functions

// Fetch all orders for the farmer
export const fetchFarmerOrders = () => {
  return api.get('/api/chat/rooms/farmer_orders/');
};

// Update order status
export const updateOrderStatus = (roomId, status) => {
  return api.post(`/api/chat/rooms/${roomId}/update_order_status/`, { status });
};
```

#### 3. WebSocket Handler Updates

Update the WebSocket message handler to process order status updates:

```javascript
// In your WebSocket connection handler
socket.onmessage = (event) => {
  const data = JSON.parse(event.data);
  
  switch (data.type) {
    case 'message':
      // Handle regular messages
      // ...existing code...
      break;
      
    case 'order_status_update':
      // Handle order status updates
      handleOrderStatusUpdate(data);
      // If in order list view, refresh the orders
      if (currentView === 'orders') {
        loadOrders();
      }
      // If in chat view, update the order status display
      if (currentView === 'chat') {
        updateOrderStatusDisplay(data.status);
      }
      // Show notification
      showNotification(`Order status updated to: ${data.status}`);
      break;
      
    // ...other cases...
  }
};
```

#### 4. CSS for Order Status and Blinking Indicator

Add CSS for styling order statuses and the blinking indicator:

```css
/* Add to your CSS file */

/* Order status colors */
.status-new {
  background-color: #ffeeba;
  border-left: 4px solid #ffc107;
}

.status-active {
  background-color: #d4edda;
  border-left: 4px solid #28a745;
}

.status-completed {
  background-color: #d1ecf1;
  border-left: 4px solid #17a2b8;
}

/* Blinking indicator for new orders */
@keyframes blink {
  0% { opacity: 1; }
  50% { opacity: 0.5; }
  100% { opacity: 1; }
}

.new-order-blink {
  animation: blink 1s linear infinite;
  position: relative;
}

.new-order-blink::before {
  content: '';
  display: block;
  width: 10px;
  height: 10px;
  background-color: #ff4d4f;
  border-radius: 50%;
  position: absolute;
  top: 10px;
  right: 10px;
}
```

#### 5. Order Status Component for Chat Room

Create a component to display and update order status within a chat room:

```jsx
// OrderStatusIndicator.jsx
import React from 'react';
import { updateOrderStatus } from '../../services/chatService';

const OrderStatusIndicator = ({ roomId, status, isFarmer, onStatusChange }) => {
  const handleStatusChange = async (newStatus) => {
    try {
      await updateOrderStatus(roomId, newStatus);
      if (onStatusChange) {
        onStatusChange(newStatus);
      }
    } catch (error) {
      console.error('Error updating order status:', error);
    }
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case 'new': return 'New Order';
      case 'active': return 'Active Order';
      case 'completed': return 'Completed Order';
      default: return 'Unknown Status';
    }
  };

  return (
    <div className={`order-status-indicator status-${status}`}>
      <span className="status-label">{getStatusLabel(status)}</span>
      
      {isFarmer && (
        <div className="status-controls">
          <select 
            value={status}
            onChange={(e) => handleStatusChange(e.target.value)}
            className={`status-select status-${status}`}
          >
            <option value="new">New Order</option>
            <option value="active">Active Order</option>
            <option value="completed">Completed Order</option>
          </select>
        </div>
      )}
    </div>
  );
};

export default OrderStatusIndicator;
```

#### 6. Integration with Farmer Dashboard

Update the farmer dashboard to include the order list:

```jsx
// FarmerDashboard.jsx
import React from 'react';
import FarmerOrderList from './FarmerOrderList';
// ... other imports

const FarmerDashboard = () => {
  return (
    <div className="farmer-dashboard">
      <h1>Farmer Dashboard</h1>
      
      {/* Orders Section */}
      <section className="dashboard-section">
        <FarmerOrderList />
      </section>
      
      {/* Other dashboard sections */}
      {/* ... */}
    </div>
  );
};

export default FarmerDashboard;
```

### 5. Testing Checklist

- [ ] Verify that new orders appear at the top of the farmer's order list
- [ ] Confirm that the blinking indicator works for new orders
- [ ] Test changing order status from NEW to ACTIVE to COMPLETED
- [ ] Verify that WebSocket notifications work when order status changes
- [ ] Test that the time since order was placed displays correctly
- [ ] Verify that orders are properly sorted by status, newness, and recency
- [ ] Test the integration between the order list and chat functionality

### 6. Additional Notes

1. **Real-time Updates**: The WebSocket implementation ensures that order status changes are reflected in real-time without requiring page refreshes.

2. **Automatic Order Detection**: The system automatically detects when a customer has placed an order based on message content.

3. **Status Transitions**: When an order status changes from NEW to another status, the blinking indicator is automatically turned off.

4. **Time Display**: The backend provides a human-readable time since the order was placed (e.g., "5 minutes ago", "2 hours ago").

5. **Sorting Logic**: Orders are sorted by:
   - Status priority (NEW → ACTIVE → COMPLETED)
   - New order indicator (blinking orders first)
   - Recency (newest first within each category)

By implementing these features, the farmer dashboard will provide a comprehensive order management system that allows farmers to efficiently track and process customer orders.